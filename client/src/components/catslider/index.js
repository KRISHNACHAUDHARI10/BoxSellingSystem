import React, { useState, useEffect } from "react";
import Slider from "react-slick";
import { LazyLoadImage } from "react-lazy-load-image-component";
import "react-lazy-load-image-component/src/effects/blur.css";
import "slick-carousel/slick/slick.css"; // Import slick carousel default styles
import "slick-carousel/slick/slick-theme.css"; // Import slick carousel theme styles
import "./style.css";
import { fetchDataFromApi } from "../../utils/api";

const Catsliders = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Minimum number of categories to trigger the slider
  const MIN_CATEGORIES_FOR_SLIDER = 9; // You can adjust this value

  const [itembg] = useState([
    "#fffceb",
    "#ecffec",
    "#feefea",
    "#fff3eb",
    "#fff3ff",
    "#f2fce4",
    "#feefea",
    "#f1fceb",
    "#feefea",
    "#ecffec",
  ]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        setError(null);

        const res = await fetchDataFromApi("/api/category");

        if (res?.categoryList && Array.isArray(res.categoryList)) {
          // --- START OF CHANGE ---
          // Only set the top-level categories.
          // The 'categoryList' from your API endpoint already contains only top-level
          // categories at its root, with children nested inside 'children' array.
          // So, simply setting the state with res.categoryList will give you only parents.
          setCategories(res.categoryList);
          // --- END OF CHANGE ---
        } else {
          console.warn(
            "API response for categories is not an array in categoryList or is empty:",
            res
          );
          setCategories([]);
        }
      } catch (err) {
        console.error("API Error fetching categories in Catsliders:", err);
        setError("Failed to load categories. Please try again later.");
        setCategories([]);
      } finally {
        setLoading(false);
      }
    };
    fetchCategories();
  }, []);

  const settings = {
    dots: false,
    infinite: true, // Keep infinite true for seamless looping in slider mode
    speed: 500,
    slidesToShow: 10,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 2000,
    responsive: [
      { breakpoint: 1200, settings: { slidesToShow: 8 } },
      { breakpoint: 1024, settings: { slidesToShow: 7 } },
      { breakpoint: 768, settings: { slidesToShow: 5 } },
      { breakpoint: 480, settings: { slidesToShow: 3 } },
      { breakpoint: 320, settings: { slidesToShow: 2 } },
    ],
  };

  if (loading) {
    return (
      <div className="catslider-section text-center py-5">
        <p>Loading categories...</p>
        {/* Consider adding a simple CSS spinner here */}
        <div className="spinner"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="catslider-section text-center py-5">
        <p className="text-danger">{error}</p>
      </div>
    );
  }

  const renderCategoryItems = () => {
    return categories.map((category, index) => {
      const backgroundColor = itembg[index % itembg.length];
      const imageUrl =
        category.images && category.images.length > 0
          ? category.images[0]
          : "https://via.placeholder.com/150/EEEEEE/333333?text=No+Image";

      return (
        <div
          className="catslider-item row"
          key={category._id || `cat-${index}`} // Uses the custom _id if generated by backend
        >
          <div
            className="catslider-item-info"
            style={{ background: backgroundColor }}
          >
            <LazyLoadImage
              alt={category.name || "Category image"}
              effect="blur"
              className="w-100 myimage"
              src={imageUrl}
              onError={(e) => {
                e.target.onerror = null;
                e.target.src =
                  "https://via.placeholder.com/150/EEEEEE/333333?text=Error";
              }}
            />
            <h5>{category.name}</h5>
          </div>
        </div>
      );
    });
  };

  return (
    <div className="catslider-section">
      <div className="container-fluid">
        {categories.length === 0 ? (
          <div className="text-center mt-4">
            <p>No categories to display.</p>
          </div>
        ) : categories.length >= MIN_CATEGORIES_FOR_SLIDER ? (
          <Slider
            {...settings}
            className="catslider-main-slider"
            id="cat_slider_main"
          >
            {renderCategoryItems()}
          </Slider>
        ) : (
          <div className="catslider-grid">
            {" "}
            {/* New class for grid layout */}
            {renderCategoryItems()}
          </div>
        )}
      </div>
    </div>
  );
};

export default Catsliders;
